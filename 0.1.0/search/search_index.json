{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Harbringer","text":"<p>Harbringer tracks and logs networks requests in your application, letting you inspect and export them.</p> <p>This is particularly useful for mobile application, where you often want to inspect network requests and responses,  but don't want to set up a proxy to capture the requests.</p> <p>This library can help you export the requests or display them in the app itself.</p> <p>It can support any HTTP client, but for now it supports:</p> <ul> <li>OkHttp</li> </ul>"},{"location":"#getting-started","title":"Getting started","text":"<p>You can add Harbringer to your project using Gradle: <pre><code>dependencies {\n    implementation(\"se.ansman.harbringer:harbringer:0.1.0\")\n    implementation(\"se.ansman.harbringer:harbringer-okhttp3:0.1.0\")\n}\n</code></pre></p> <p>See the installation guide for more details.</p>"},{"location":"#example","title":"Example","text":"<pre><code>val harbringer = Harbringer(\n    storage = FileSystemHarbringerStorage(storageDirectory.toPath()),\n    maxRequests = 1000, // 1000 requests\n    maxDiskSize = 100 * 1024 * 1024, // 100MB\n    maxAge = 2.days,\n)\n\noutputFile.sink().use { sink -&gt;\n    harbringer.exportTo(sink)\n}\n</code></pre> <p>For more details on how to use Harbringer, see the usage guide.</p>"},{"location":"#scrubbing","title":"Scrubbing","text":"<p>You often want to ensure that sensitive data is not included in the logs. Harbringer supports scrubbing of sensitive  data from requests and responses. You can pass a <code>Scrubber</code> to the <code>Harbringer</code> constructor.</p> <p>See the scrubbing guide for more details.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#gradle","title":"Gradle","text":"<p>To use Harbringer in your project, you'll need to add a dependency on the library. <pre><code>dependencies {\n    implementation(\"se.ansman.harbringer:harbringer:0.1.0\")\n    // If you're using a supported HTTP client, then depend on the appropriate module\n    implementation(\"se.ansman.harbringer:harbringer-okhttp3:0.1.0\")\n}\n</code></pre></p>"},{"location":"getting-started/#snapshots","title":"Snapshots","text":"<p>Snapshots are published on every commit to Sonatype's snapshot repository.  To use a snapshot, add the snapshot repository: <pre><code>buildscripts {\n    repositories {\n        ...\n        maven(\"https://central.sonatype.com/repository/maven-snapshots/\")\n    }\n}\n\ndependencies {\n    implementation(\"se.ansman.harbringer:harbringer:0.2.0-SNAPSHOT\")\n}\n</code></pre></p>"},{"location":"logging-requests/","title":"Logging Requests","text":"<p>If you want to log requests, but your HTTP client isn't supported out of the box then you can implement the logging yourself.</p> <p>To log a request, you need to call <code>Harbringer.record</code>: <pre><code>// Start the request\nval pendingRequest = harbringer.record(\n    request = Harbringer.Request(\n        method = \"POST\",\n        url = \"https://example.com\",\n        protocol = \"HTTP/1.1\",\n        headers = Harbringer.Headers(\"Content-Type\" to \"application/json\"),\n    )\n)\n// Write the request body\npendingRequest.requestBody.buffer().use { it.writeUtf8(\"\"\"{\"example\":\"request\"}\"\"\") }\n// Write the response body\npendingRequest.responseBody.buffer().use { it.writeUtf8(\"\"\"{\"example\":\"response\"}\"\"\") }\n// Log the response\npendingRequest.onComplete(\n    request = Harbringer.Request(\n        code = 200,\n        message = \"OK\",\n        protocol = \"HTTP/1.1\",\n        headers = Harbringer.Headers(\"Content-Type\" to \"application/json\"),\n        body = Harbringer.Body(\n            contentType = \"application/json\",\n            byteCount = 22,\n        )\n    ),\n    // If known, you can pass the timings here too\n    timings = Harbringer.Timings(\n        total   = 123.milliseconds,\n        blocked =  10.milliseconds,\n        dns     =   8.milliseconds,\n        connect =  10.milliseconds,\n        send    =  40.milliseconds,\n        wait    =   4.milliseconds,\n        receive =  48.milliseconds, \n        ssl     =   3.milliseconds,\n    )\n)\n// Or log the failure\npendingRequest.onFailure(IOException(\"Failed to connect\"))\n</code></pre></p>"},{"location":"okhttp/","title":"OkHttp","text":"<p>To use Harbringer with OkHttp, you need to add the <code>harbringer-okhttp3</code> dependency to your project. Then you can add it to your OkHttp builder:</p> <pre><code>val harbringer = Harbringer(\n    storage = FileSystemHarbringerStorage(storageDirectory.toPath()),\n    maxRequests = 1000, // 1000 requests\n    maxDiskSize = 100 * 1024 * 1024, // 100MB\n)\n\nval okHttpClient = OkHttpClient.Builder()\n    .addInterceptor(harbringer.interceptor())\n    .build()\n</code></pre>"},{"location":"scrubbing/","title":"Scrubbing","text":"<p>You often want to ensure that sensitive data is not included in the logs. Harbringer supports scrubbing of sensitive data from requests and responses. You can pass a <code>Scrubber</code> to the <code>Harbringer</code> constructor:</p> <pre><code>val harbringer = Harbringer(\n    scrubber = Scrubber(\n        request = Scrubber.request(\n            // Replaces the value of the \"apiKey\" query parameter with \"******\"\n            queryParameter = Scrubber.queryParameter(\"apiKey\"),\n            // Replaces the value of the \"Authorization\" query parameter with \"******\"\n            header = Scrubber.header(\"Authorization\"),\n        ),\n        // Removes the \"password\" and \"username\" fields from the request body, and if the request is against the login endpoint.\n        requestBody = Scrubber.json(\"$.username\", \"$.password\", onlyIf = { it.url.endsWith(\"/login\") }),\n        response = Scrubber.request(\n            header = Scrubber.header(\"Sensitive-Header\"),\n        ),\n        // Removes the \"token\" field from the response body, and if the request is against the login endpoint.\n        responseBody = Scrubber.json(\"$.token\", onlyIf = { it.url.endsWith(\"/login\") }),\n    )\n)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use Harbringer, you first need to create a <code>Harbringer</code> instance: <pre><code>val harbringer = Harbringer(\n    // Store requests on disk\n    storage = FileSystemHarbringerStorage(storageDirectory.toPath()),\n    // Store the last 1000 requests\n    maxRequests = 1000,\n    // Store up to 100MB of requests\n    maxDiskSize = 100 * 1024 * 1024,\n)\n</code></pre></p>"},{"location":"usage/#storage","title":"Storage","text":"<p>Harbringer ships with two storage implementations; <code>FileSystemHarbringerStorage</code> and <code>InMemoryHarbringerStorage</code>. The former stores requests on disk, while the latter stores them in memory. You can also implement your own storage by  implementing the <code>HarbringerStorage</code> interface.</p> <p>Please bear in mind that the storage my be thread safe so implementing it can be challenging.</p>"},{"location":"usage/#exporting","title":"Exporting","text":"<p>You can export the requests to a file using the <code>exportTo</code> method: <pre><code>FileSystem.SYSTEM.sink(\"/path/to/requests.har\".toPath()).use { sink -&gt;\n    harbringer.exportTo(sink)\n}\n</code></pre></p> <p>This will write the requests to the file in the HAR format. You can then open the file in a HAR viewer, such as Google Chrome's HAR viewer, or import it into a tool like Postman, Charles Proxy or Proxyman.</p> <p>You can also implement your own exporter by reading the entries from the <code>Harbringer</code> instance.</p>"},{"location":"usage/#scrubbing","title":"Scrubbing","text":"<p>You often want to ensure that sensitive data is not included in the logs. Harbringer supports scrubbing of sensitive. For more information on scrubbing, see the scrubbing guide.</p>"},{"location":"about/license/","title":"License","text":"<pre><code>Copyright 2025 Nicklas Ansman\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre> <p>You can find the full license at ansman/harbringer.</p>"}]}